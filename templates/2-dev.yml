kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: fruitapp-devel
  annotations:
    openshift.io/display-name: STARTX FruitApp demo (developper)
    description: >
      Deploy all components required to build and deploy the fruitapp demo application from the devel version.
      Namespace used should be in the form of <application_name>-devel-<developper_name> for example fruitapp-devel-christophe
    iconClass: icon-openshift
    tags: startx,demo,applicaiton,ci,cd,cicd,fruitapp
    openshift.io/provider-display-name: STARTX
    openshift.io/generated-by: startx
  labels:
    template: fruitapp-devel
    app.kubernetes.io/name: "fruitapp-devel"
    app.kubernetes.io/managed-by: startx
message: |-
  Developpment environment for developper ${DEV_NAME} working is created and application ${APP_NAME} 
  building is started. Project context is deployed with the following characteristics :

  namespace         : ${APP_NAME}-devel-${DEV_NAME}
  database
    kind            : postgresql
    image           : openshift/postgresql:${POSTGRESQL_VERSION}
    hostname        : db
    port            : 5432
    database        : ${APP_NAME}
    user            : ${APP_NAME}-devel-${DEV_NAME}
    password        : ${APP_NAME}-devel-password
  frontend
    kind            : nodejs
    image           : openshift/nodejs:${NODEJS_VERSION}
    hostname        : frontend
    port            : 8080
labels:
  template: fruitapp-devel
  app.kubernetes.io/managed-by: startx
objects:
- kind: Secret
  apiVersion: v1
  stringData:
    database-name: ${APP_NAME}
    database-password: ${APP_NAME}-devel-password
    database-user: ${APP_NAME}-devel-${DEV_NAME}
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    namespace: ${APP_NAME}-devel-${DEV_NAME}
    name: db
  type: Opaque
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    annotations:
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"postgresql:${POSTGRESQL_VERSION}","namespace":"openshift"},"fieldPath":"spec.template.spec.containers[?(@.name==\"postgresql\")].image","pause":"false"}]'
      openshift.io/generated-by: startx
    labels:
      app: db
      app.kubernetes.io/component: db
      app.kubernetes.io/instance: db
      app.kubernetes.io/name: db
      app.kubernetes.io/part-of: ${APP_NAME}
      app.openshift.io/runtime: postgresql
      app.openshift.io/runtime-version: "${POSTGRESQL_VERSION}"
      startx.fr/app: ${APP_NAME}
    namespace: ${APP_NAME}-devel-${DEV_NAME}
    name: db
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: db
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      type: Recreate
    template:
      metadata:
        labels:
          app: db
          deploymentconfig: db
          startx.fr/app: ${APP_NAME}
      spec:
        containers:
          - name: postgresql
            image: openshift/postgresql:${POSTGRESQL_VERSION}
            imagePullPolicy: IfNotPresent
            ports:
            - containerPort: 5432
              protocol: TCP
            env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: db
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: db
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: db
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              failureThreshold: 3
              initialDelaySeconds: 120
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 10
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              failureThreshold: 3
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            resources:
              limits:
                cpu: 100m
                memory: 256Mi
              requests:
                cpu: 50m
                memory: 64Mi
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: db-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: db-data
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    annotations:
      alpha.image.policy.openshift.io/resolve-names: '*'
      app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"db"}]'
      app.openshift.io/vcs-ref: "devel"
      app.openshift.io/vcs-uri: https://github.com/startxfr/nodejs-rest-http-crud.git
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"frontend:latest","namespace":"${APP_NAME}-devel-${DEV_NAME}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"frontend\")].image","pause":"false"}]'
      openshift.io/generated-by: startx
    labels:
      app: frontend
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: frontend
      app.kubernetes.io/name: frontend
      app.kubernetes.io/part-of: ${APP_NAME}
      app.openshift.io/runtime: nodejs
      app.openshift.io/runtime-version: "${NODEJS_VERSION}"
      startx.fr/app: ${APP_NAME}
    namespace: ${APP_NAME}-devel-${DEV_NAME}
    name: frontend
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: frontend
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: frontend
          startx.fr/app: ${APP_NAME}
      spec:
        containers:
        - name: frontend
          image: ${APP_NAME}-devel-${DEV_NAME}/frontend:latest
          imagePullPolicy: Always
          env:
          - name: MY_DATABASE_SERVICE_HOST
            value: db
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: db
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: db
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: db
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 7
            timeoutSeconds: 2
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- kind: Service
  apiVersion: v1
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      app: db
      app.kubernetes.io/component: db
      app.kubernetes.io/instance: db
      app.kubernetes.io/name: db
      app.kubernetes.io/part-of: ${APP_NAME}
      startx.fr/app: ${APP_NAME}
    namespace: ${APP_NAME}-devel-${DEV_NAME}
    name: db
  spec:
    internalTrafficPolicy: Cluster
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: db
    sessionAffinity: None
    type: ClusterIP
- kind: Service
  apiVersion: v1
  metadata:
    annotations:
      app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"db"}]'
      app.openshift.io/vcs-ref: "devel"
      app.openshift.io/vcs-uri: https://github.com/startxfr/nodejs-rest-http-crud.git
      openshift.io/generated-by: startx
    labels:
      app: frontend
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: frontend
      app.kubernetes.io/name: frontend
      app.kubernetes.io/part-of: ${APP_NAME}
      app.openshift.io/runtime: nodejs
      app.openshift.io/runtime-version: "${NODEJS_VERSION}"
      startx.fr/app: ${APP_NAME}
    namespace: ${APP_NAME}-devel-${DEV_NAME}
    name: frontend
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: frontend
    sessionAffinity: None
    type: ClusterIP
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    annotations:
      app.openshift.io/vcs-ref: "devel"
      app.openshift.io/vcs-uri: https://github.com/startxfr/nodejs-rest-http-crud.git
      openshift.io/generated-by: startx
    labels:
      app: frontend
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: frontend
      app.kubernetes.io/name: frontend
      app.kubernetes.io/part-of: ${APP_NAME}
      app.openshift.io/runtime: nodejs
      app.openshift.io/runtime-version: "${NODEJS_VERSION}"
      startx.fr/app: ${APP_NAME}
    namespace: ${APP_NAME}-devel-${DEV_NAME}
    name: frontend
  spec:
    lookupPolicy:
      local: false
- kind: Pipeline
  apiVersion: tekton.dev/v1beta1
  metadata:
    labels:
      app.kubernetes.io/instance: frontend
      app.kubernetes.io/name: frontend
      pipeline.openshift.io/runtime: nodejs
      pipeline.openshift.io/runtime-version: "${NODEJS_VERSION}"
      pipeline.openshift.io/type: kubernetes
    namespace: ${APP_NAME}-devel-${DEV_NAME}
    name: frontend-devel
  spec:
    params:
    - default: frontend
      name: APP_NAME
      type: string
    - default: https://github.com/startxfr/nodejs-rest-http-crud.git
      name: GIT_REPO
      type: string
    - default: devel
      name: GIT_REVISION
      type: string
    - default: image-registry.openshift-image-registry.svc:5000/${APP_NAME}-devel-${DEV_NAME}/frontend:latest
      name: IMAGE_NAME
      type: string
    - default: .
      name: PATH_CONTEXT
      type: string
    - default: ${NODEJS_VERSION}
      name: VERSION
      type: string
    tasks:
    - name: fetch-repository
      params:
      - name: url
        value: $(params.GIT_REPO)
      - name: revision
        value: $(params.GIT_REVISION)
      - name: subdirectory
        value: ""
      - name: deleteExisting
        value: "true"
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
      - name: output
        workspace: workspace
    - name: build
      params:
      - name: IMAGE
        value: $(params.IMAGE_NAME)
      - name: TLSVERIFY
        value: "false"
      - name: PATH_CONTEXT
        value: $(params.PATH_CONTEXT)
      - name: VERSION
        value: $(params.VERSION)
      runAfter:
      - fetch-repository
      taskRef:
        kind: ClusterTask
        name: s2i-nodejs
      workspaces:
      - name: source
        workspace: workspace
    - name: deploy
      params:
      - name: SCRIPT
        value: oc rollout status deploy/$(params.APP_NAME)
      runAfter:
      - build
      taskRef:
        kind: ClusterTask
        name: openshift-client
    workspaces:
    - name: workspace
- kind: PipelineRun
  apiVersion: tekton.dev/v1beta1
  metadata:
    labels:
      app.kubernetes.io/instance: frontend-devel
      app.kubernetes.io/name: frontend
      pipeline.openshift.io/runtime: nodejs
      pipeline.openshift.io/runtime-version: "${NODEJS_VERSION}"
      pipeline.openshift.io/type: kubernetes
      tekton.dev/pipeline: frontend-devel
    namespace: ${APP_NAME}-devel-${DEV_NAME}
    name: frontend-firstrun
  spec:
    params:
    - name: APP_NAME
      value: frontend
    - name: GIT_REPO
      value: https://github.com/startxfr/nodejs-rest-http-crud.git
    - name: GIT_REVISION
      value: devel
    - name: IMAGE_NAME
      value: image-registry.openshift-image-registry.svc:5000/${APP_NAME}-devel-${DEV_NAME}/frontend:latest
    - name: PATH_CONTEXT
      value: .
    - name: VERSION
      value: ${NODEJS_VERSION}
    pipelineRef:
      name: frontend-devel
    workspaces:
    - name: workspace
      volumeClaimTemplate:
        metadata:
          labels:
            tekton.dev/pipeline: frontend
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    annotations:
      app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"db"}]'
      openshift.io/host.generated: "true"
    labels:
      app: frontend
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: frontend
      app.kubernetes.io/name: frontend
      app.kubernetes.io/part-of: ${APP_NAME}
      app.openshift.io/runtime: nodejs
      app.openshift.io/runtime-version: "${NODEJS_VERSION}"
      startx.fr/app: ${APP_NAME}
    namespace: ${APP_NAME}-devel-${DEV_NAME}
    name: frontend
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: frontend
      weight: 100
    wildcardPolicy: None
parameters:
  - name: DEV_NAME
    displayName: Developper name
    description: "Name of the developper. Used for namespace scope"
    value: christophe
  - name: APP_NAME
    displayName: Application name
    description: "Name of the application. Used for namespace scope"
    value: fruitapp
  - name: POSTGRESQL_VERSION
    displayName: PostgreSQL version
    description: "Version of the postgresql backend. Could be 10-el7, 10-el8, 9.6-el8, 13-el8, 12-el8, 12-el7"
    value: latest
  - name: NODEJS_VERSION
    displayName: NodeJS version
    description: "Version of the NodeJS builder. Could be 12-ubi7, 12-ubi8, 14-ubi7, 14-ubi8, 14-ubi8-minimal"
    value: latest
